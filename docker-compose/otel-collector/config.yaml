
receivers:
  otlp:
    protocols:
      grpc:
      http:
        cors:
          allowed_origins: [ "*" ]
          allowed_headers: [ "*" ]
  prometheus/collector:
    config:
      scrape_configs:
        - job_name: 'opentelemetry-collector'
          static_configs:
            - targets: ['localhost:8888']

processors:
  attributes/cluster:
    actions:
      - key: cluster
        value: "docker-compose"
        action: upsert
  attributes/http_backward_compatibility:
    actions:
      - key: http.response.status_code
        from_attribute: http.status_code
        action: upsert
      - key: http.request.method
        from_attribute: http.method
        action: upsert
  span/set_span_name_for_http_client:
    name:
      from_attributes:
        - http.request.method
        - server.address
      separator: " "
  span/set_span_name_for_http_server:
    name:
      from_attributes:
        - http.request.method
        - http.route
      separator: " "

exporters:
  otlphttp/metrics:
    endpoint: http://prometheus:9090/api/v1/otlp
  otlphttp/traces:
    endpoint: http://tempo:4318
  otlphttp/logs:
    endpoint: http://loki:3100/otlp
  logging/metrics:
    verbosity: detailed
  logging/traces:
    verbosity: detailed
  logging/logs:
    verbosity: detailed

service:
  pipelines:
    traces:
      receivers: [otlp]
      processors:
        - attributes/cluster
        - attributes/http_backward_compatibility
        - span/set_span_name_for_http_server
        - span/set_span_name_for_http_client
      exporters: [otlphttp/traces]
    metrics:
      receivers: [otlp,prometheus/collector]
      processors: []
      exporters: [otlphttp/metrics]
    logs:
      receivers: [otlp]
      processors:
        - attributes/cluster
      exporters: [otlphttp/logs]
